#!/usr/bin/env python3

from argparse import ArgumentParser
from collections import defaultdict
import re
import socket
import sys

BROADCAST_IP = "255.255.255.255"
DEFAULT_PORT = 9


def setup_arguments() -> ArgumentParser:
    parser = ArgumentParser()
    parser.add_argument("--hosts", default="/etc/hosts")
    parser.add_argument("--macs", default="/etc/macs")
    parser.add_argument("targets", nargs="+")
    return parser


def uncomment(s: str, comment: str):
    uncomment = s.split(comment)
    return uncomment[0] if uncomment else ""


def grep_row(fd, targets):
    """Opens and searches entire file for matches.
    Returns the entire matched line as a splitted list"""
    while line := fd.readline():
        if line := uncomment(line, "#").split():
            if line[0] in targets:
                for val in line[1:]:
                    yield line[0], val


def split_ports(targets: str):
    ports = dict()

    for i in range(len(targets)):
        count = targets[i].count(":")

        if count in (0, 5):
            continue
        elif count == 1:
            [target, port] = targets[i].split(":")
            ports[target] = int(port)
            targets[i] = target
        else:
            print(f"Unrecognized target format: {targets[i]}", file=sys.stderr)

    return ports


def get_macs(macs_file, targets):
    macs = defaultdict(list)

    try:
        with open(macs_file) as fd:
            for target, mac in grep_row(fd, targets):
                macs[target].append(mac)
    except OSError as e:
        print(e, file=sys.stderr)

    for target in targets:
        if re.search("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", target):
            macs[target].append(target)

    return macs


def remove_separators(mac: str, separators=[":", "-"]):
    for sep in separators:
        mac = mac.replace(sep, "")
    return mac


def magic_packet(mac: str) -> bytes:
    "https://en.wikipedia.org/wiki/Wake-on-LAN#Magic_packet"
    padding = "F" * 2 * 6
    return bytes.fromhex(padding + mac * 16)


def send_packets(ip, port: int, packet: bytes):
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        sock.connect((ip, port))
        sock.send(packet)


def wake(ips: dict, ports: dict, macs: dict, target: str):
    if target not in macs:
        print(f"Could not wake {target}. No mac found.", file=sys.stderr)
        return False
    
    ip = ips.get(target, BROADCAST_IP)
    port = ports.get(target, DEFAULT_PORT)
    target_macs = macs[target]

    packets = b''.join(map(magic_packet, map(remove_separators, target_macs)))

    print(f"Waking {target} with address {ip}:{port} and macs of %s..." 
        % macs[target], file=sys.stderr)
    send_packets(ip, port, packets)

    return True


if __name__ == "__main__":
    args = setup_arguments().parse_args()

    ports = split_ports(args.targets)
    with open(args.hosts, "r") as fd:
        ips = dict(grep_row(fd, args.targets))
    macs = get_macs(args.macs, args.targets)

    wakes = map(lambda target: wake(ips, ports, macs, target), args.targets)
    wakes = map(lambda target: int(not target), wakes)
    exit(sum(wakes))
